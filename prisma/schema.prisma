// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  team          Team?     @relation(fields: [teamId], references: [id])
  teamId        String?
  audits        Audit[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Muddle
model Team {
  id        String    @id @default(cuid())
  name      String
  members   User[]
  projects  Project[]
  createdAt DateTime  @default(now())
}

model Project {
  id        String   @id @default(cuid())
  name      String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  createdAt DateTime @default(now())
  items     Item[]
}

model Item {
  id          String   @id @default(cuid())
  name        String
  description String?
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  frequency   Json?
  createdAt   DateTime @default(now())
  audits      Audit[]
}

model Audit {
  id        String    @id @default(cuid())
  item      Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  status    String
  notes     String?
  findings  Finding[]
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())
}

model Finding {
  id        String   @id @default(cuid())
  audit     Audit    @relation(fields: [auditId], references: [id], onDelete: Cascade)
  auditId   String
  severity  String   @default("info")
  notes     String?
  createdAt DateTime @default(now())
}
